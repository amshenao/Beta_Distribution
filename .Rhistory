require("carData")
install.packages("carData")
require("carData")
head(Prestige)
dim(Prestige)
plot(Prestige[,1:4])
x <- model.matrix(~education + prestige + women, data = Prestige)
require("carData")
head(Prestige)
x <- model.matrix(~education + prestige + women, data = Prestige)
head(x)
require("mtCars")
require("mtcars")
install.packages("mtcars")
require("mtcars")
install.packages("ggplot2")
require("mtcars")
require(ggplot2)
require("mtcars")
require(mtcars)
library(dplyr)
install.packages("dplyr")
require("mtcars")
require(dplyr)
require("mtcars")
require("MPV")
require(MPV)
require(MPV)
install.packages("MPV")
require(MPV)
head(table.b4)
dim(table.b4)
mod1 <- lm(y~x1+x2, data=table.b4)
mod1
mod2 <- lm(y~x1+x2+x3+x4, data=table.b4)
summary(mod1)
summary(mod2)
Y <- table.b4$y
n <- nrow(table.b4)
r <- 2
p <- 4
#para el modelo completo
X <- model.matrix(~x1+x2+x3+x4,data=table.b4)
betas.completo <- mod2$coefficients
SS_r.completo <- t(betas.completo)%*%t(X)*%*Y-n*(mean(Y))^2
SS_r.completo <- t(betas.completo)%*%t(X)%*%Y-n*(mean(Y))^2
MS.res <- (t(Y)%*%Y-t(betas.completo)%*%t(X)%*%Y)/(n-p-1)
View(MS.res)
X1 <- model.matrix(~x1+x2, data=table.b4)
ss_r.reducido <- t(betas.reducido)%*%t(X1)%*%Y-n*(mean(Y))^2
betas.reducido <- mod1$coefficients
ss_r.reducido <- t(betas.reducido)%*%t(X1)%*%Y-n*(mean(Y))^2
SS_r_2_1 <- SS_r.completo-SS_r.reducido
ss_r.reducido <- t(betas.reducido)%*%t(X1)%*%Y-n*(mean(Y))^2
SS_r_2_1 <- SS_r.completo-SS_r.reducido
SS_r_2_1 <- SS_r.completo-ss_r.reducido
F_0 <- (SS_r_2_1/r)/MS.res
F_alpha
#Estadístico teórico F;
F_alpha<- qf(0.05,r,(n-p-1),lower.tail = FALSE)
F_alpha
anova(mod1,mod2)
head(softdrink)
#ponerle nombre a las variables
colnames(softdrink) <- c('tiempo','cantidad,'distancia')
#ponerle nombre a las variables
colnames(softdrink) <- c('tiempo','cantidad','distancia')
mod3 <- lm(tiempo~cantidad+distancia+distancia*cantidad, data=softdrink)
summary(mod3)
mod4 <- lm(tiempo~cantidad+distancia, data=softdrink)
summary(mod4)
install.packages("car")
require(car)
vif(lm(tiempo~ cantidad+ distancia, data=softdrink))
require("carData")
#obteniendo la matriz de diseño
X <- model.matrix(~education, prestige + women, data=Prestige)
#obteniendo la matriz de diseño
X <- model.matrix(~education, prestige + women, data=Prestige)
head(Prestige)
dim(Prestige)
plot(Prestige[,1:4])
#obteniendo la matriz de diseño
X <- model.matrix(~education + prestige + women, data=Prestige)
Y <- Prestige$income
betas_estimados <- solve(t(X)%*%X)%*%t(X)%*%Y
betas_estimados
#obteniendo los errores estándar de los B_j ajustados
Y_est <- X%*%betas_estimados
sigma_est <- sum((Y-Y_est)^2)/n-p-1
sigma_est
sqrt(sigma_est)
#obteniendo los errores estándar de los B_j ajustados
n <- nrow(Prestige)
p <- 3
Y_est <- X%*%betas_estimados
sigma_est <- sum((Y-Y_est)^2)/n-p-1
sqrt(sigma_est)
C <- solve(t(X)%*%X)
se_betas <- sqrt(sigma_est*diag(C))
se_betas
install.packages("dplyr")
require(("mtcars"))
head(mtcars)
X <-model.matrix(~wt+disp, data=mtcars)
H <- X%*%solve(t(X)%*%X)%*%t(X)
length(diag(H))
h_max <- max(diag(H))
x <- rnorm(40,0,1)
#supuesto de normalidad de los errores
set.seed(123)
x <- rnorm(40,0,1)
qqnorm(x, xlab="Cuantiles teoricos de la normal estandar",
ylab = "Residuales estandarizados",
pch=19,col=2,ylim = c(-2,2), xlim=c(-2,2))
qqline(x,col=4,lwd=2)
Datos <- read.csv(file.choose(), header=T, sep = ",")
Datos <- read.csv(file.choose(), header=T, sep = ",")
Datos <- read.csv(file.choose(), header=T, sep = ",")
dim(Datos)
Mod1 <- lm(Peso~Estatura+Circunf_cuello+Circunf_mun,
data=Datos)
summary(Mod1)
install.packages("olsrr")
Mod2 <- lm(Peso~Circunf_cuello, data=Datos)
summary(Mod2)
Leverage2 <- ols_leverage(Mod2)
require(olsrr)
Leverage2 <- ols_leverage(Mod2)
Leverage2
??ols_leverage
sort.list(Leverage2, decreasing = TRUE)
plot(Datos$Circunf_cuello, Datos$Peso,xlab = "Circunf.cuello",
ylab="Peso")
abline(Mod2, col="blue",lwd=2)
points(Datos$Circunf_cuello[c(1,11)], Datos$Peso[c(1,11)],
col=c(2,3),pch=19, cex=2)
x <- c(17.49,1.73,-7.58,1.73,0.79,-1.84,-7.58,-1.84,5.21)
X <- matrix(x,ncol=3,byrow = F)
X
Y <- c(132.19,901.09,510.03)
betas <- X%*%Y
betas
362.48-3.35
359.13/2
3.35/20
179.565/0.1675
?qf
f_alpha <- qf(0.05,2,20,lower.tail = F)
f_alpha
(0.1675*0.79)^1/2
2.0946/0.066
t <- qt(0.05,20,lower.tail = F)
-2.7495-1.7247*0.06
-2.7495+1.7247*0.06
t <- qt(0.025,24,lower.tail = F)
2.11/0.25
5.87-(2.0638)*(4.08)
5.87+(2.0638)*(4.08)
tabla <- read.csv(file.choose())
View(tabla)
tabla <- read.csv(file.choose(), header = T, sep=",")
View(tabla)
tabla <- read.csv(file.choose(), header = T)
View(tabla)
tabla <- read.csv(file.choose(), header = T)
View(tabla)
mod_ejemplo<-lm(Y~X1+X2+X3, data= tabla)
mod_ejemplo
summary(mod_ejemplo)
x1 <- c(5.8,4.2,5.1)
#matriz de diseño
x <- model.matrix(~x1,x2,x3, data=tabla)
#matriz de diseño
x <- model.matrix(~X1,X2,X3, data=tabla)
#matriz de diseño
x <- model.matrix(~X1+X2+X3, data=tabla)
x
h <- x%*%solve(t(x)%*%x)%*%t(x)
length(diag(h))
hmax <- max(diag(h))
hmqx
hmax
h_muestra <- x1%*%solve(t(x)%*%x)%*%t(x1)
h_muestra <- x1%*%solve(t(x)%*%x)%*%t(x1)
x1
x1 <- model.matrix(5.8,4.2,5.1)
x1 <- matrix(5.8,4.2,5.1)
x1
x2 <- matrix(x1,ncol = 3,byrow = F)
x2 <- matrix(x1,ncol = 1,byrow = F)
h_muestra <- x2%*%solve(t(x)%*%x)%*%t(x2)
h_muestra <- x2%*%solve(t(x)%*%x)%*%t(x2)
x2
x1 <- c(5.8,4.2,5.1)
x2 <- matrix(x1,ncol = 1,byrow = F)
h_muestra <- x2%*%solve(t(x)%*%x)%*%t(x2)
x2
x2 <- matrix(x1,ncol = 3,byrow = F)
x2
h_muestra <- x2%*%solve(t(x)%*%x)%*%t(x2)
x1 <- c(5.8,4.2,5.1)
h_muestra <- t(x1)%*%solve(t(x)%*%x)%*%x1
h_muestra <- t(x1)%*%solve(t(x)%*%x)%*%x1
#matriz de diseño
x <- model.matrix(~X1+X2+X3, data=tabla)
h <- x%*%solve(t(x)%*%x)%*%t(x)
h_muestra <- t(x1)%*%solve(t(x)%*%x)%*%x1
x1
solve(t(x)
k
t(x1)
x1
t(x)
x1 <- c(5.8,4.2,5.1)
x1
t(x1)
h_muestra <- t(x1)%*%solve(t(x)%*%x)%*%x1
t(x0)
x0 <- c(1,2,3)
t(x0)
vif(lm(Y~X1+X2+X3, data= tabla))
require(car)
vif(lm(Y~X1+X2+X3, data= tabla))
?t
require(MPV)
?mpv
??MPV
head(table.b1)
datos <- read.table(table.b1)
datos <- (table.b1)
View(datos)
mod_liga <- lm(y~x2+x7+x8, data=datos)
anova(mod_liga)
summary(mod_liga)
0.003598/0.000695
View(datos)
t <- qt(0.025,24,lower.tail = F)
t
#intervalos de confianza para b7
confint(mod_liga, level = 0.95)
#intervalos de confianza para la respuesta media
x_pred <- c(2300,56,2100)
predict(mod_liga, x_pred,interval = c( "confidence"))
#intervalos de confianza para la respuesta media
x_pred <- data.frame(x2=2300,x7=56,x8=2100)
predict(mod_liga, x_pred,interval = c( "confidence"))
#usando solo x7 y x8 como regresores
mod_liga_2 <- lm(y~x7+x8)
#usando solo x7 y x8 como regresores
mod_liga_2 <- lm(y~x7+x8, data=datos)
summary(mod_liga)
summary(mod_liga_2)
confint(mod_liga_2, level = 0.95)
predict(mod_liga, x_pred,interval = c( "confidence"))
#intervalos de confianza para los betas
confint(mod_liga, level = 0.95)
vif(lm(Y~X1+X2+X3, data= tabla))
require(car)
require(MPV)
datos <- (table.b1)
mod_liga <- lm(y~x2+x7+x8, data=datos)
summary(mod_liga)
anova(mod_liga)
y <- datos$y
si2 <- (sum(y))^2
n <- nrow(y)
SST <- (yt*y)-(si2/n)
yt <- t(datos$y)
SST <- (yt*y)-(si2/n)
betas <- mod_liga$coefficients
SSR <-
betas
betas
betast <-t(mod_liga$coefficients)
betast
X <- model.matrix(~x2+x7+x8, data = datos)
SSR <- betast%*%t(X)%*%y
SSR <- (betast%*%t(X)%*%y)-(si2/n)
SST
SST <- (yt%*%y)-(si2/n)
SST
yt
y
si2
v <- c(1,2)
t(v)
v
SSR
betast <-t(mod_liga$coefficients)
betast
X <- model.matrix(~x2+x7+x8, data = datos)
SSR <- (betast%*%t(X)%*%y)-(si2/n)
SSR
(yt%*%y)
(si2/n)
n <- nrow(y)
n
n <- nrow(datos
n
n <- nrow(datos)
n
SST <- (yt%*%y)-(si2/n)
SST
SSR <- (betast%*%t(X)%*%y)-(si2/n)
SSR
SSres=SST-SSR
MSR <- SSR/3
MSRES <- SSres/n-3-1
f0 <- MSR/MSRES
f0
MSR
MMSRES
MSRES
SSres
MSRES <- SSres/n-3-1
MSRES
n-3-1
MSRES <- SSres/24
MSRES
MSRES <- SSres/(n-3-1)
MSRES
f0 <- MSR/MSRES
f0
F_alpha<- qf(0.05,3,(24),lower.tail = FALSE)
#usando solo x7 y x8 como regresores
mod_liga_2 <- lm(y~x7+x8, data=datos)
summary(mod_liga_2)
mod_liga <- lm(y~x2+x7+x8, data=datos)
summary(mod_liga)
0.003598/0.000695
anova(mod_liga)
cor(y, mod_liga$fitted.values)
summary(mod_liga)
(cor(y, mod_liga$fitted.values))^2
confint(mod_liga, data=datos)
#leer base de datos
xfactory <- read.csv(file.choose(), header=T)
View(xfactory)
#leer base de datos
xfactory <- read.csv(file.choose(), header=T, sep=',')
95.7-38.2
95.7-65.5
modelo_factory <- lm(y~x1+x2+x3+x4+x5, data=xfactory)
modelo_factory <- lm(y~X1+X2+X3+X4+X5, data=xfactory)
View(xfactory)
modelo_factory <- lm(y~X1+X2+X3, data=xfactory)
modelo_factory <- lm(y~X1+X2+X3, data=xfactory)
dim(xfactory)
modelo_factory <- lm(y~X2+X3, data=xfactory)
modelo_factory(nas())
modelo_factory <- lm(y~X3, data=xfactory)
modelo_factory <- lm(y~X3, data=xfactory)
#leer base de datos
xfactory <- read.csv(file.choose(), header=T, sep=',')
modelo_factory <- lm(y~X3, data=xfactory)
View(xfactory)
#leer base de datos
xfactory <- read.csv(file.choose(), header=T, sep=',')
modelo_factory <- lm(y~X3, data=xfactory)
modelo_factory <- lm(Y~X3, data=xfactory)
modelo_factory <- lm(Y~X1+X2+X3, data=xfactory)
modelo_factory <- lm(Y~X1+X2+X3+X4+X5, data=xfactory)
summary(modelo_factory)
plot(xfactory)
summary(modelo_factory)
-0.038795/0.047406
anova(modelo_factory)
modelo_factory_1 <- lm(Y~X2+X3+X5, data=xfactory)
summary(modelo_factory_1)
q()
View(betast)
View(betast)
install.packages("shinydashboard")
shiny::runApp('2019-02/APLICACION/APLICACION 2/FINAL')
shiny::runApp('2019-02/APLICACION/APLICACION 2/FINAL')
runApp('2019-02/APLICACION/APLICACION 2/FINAL')
shiny::runApp('2019-02/APLICACION/APLICACION 2/FINAL')
runApp('2019-02/APLICACION/APLICACION 2/FINAL')
runApp('2019-02/APLICACION/APLICACION 2/FINAL')
runApp('2019-02/APLICACION/APLICACION 2/FINAL')
runApp('2019-02/APLICACION/APLICACION 2/FINAL')
runApp('2019-02/APLICACION/APLICACION 2/FINAL')
